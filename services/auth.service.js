const bcrypt = require("bcryptjs");
const User = require("../models/User");
const { generateToken } = require("../utils/jwt");

// REGISTER
exports.register = async (req, res) => {
  try {
    const { name, email, password, phone } = req.body;

    // 1Ô∏è‚É£ Ki·ªÉm tra input h·ª£p l·ªá
    if (!email || !password) {
      return res.status(400).json({ message: "Email v√† password l√† b·∫Øt bu·ªôc" });
    }

    // 2Ô∏è‚É£ Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existing = await User.findOne({ where: { email } });
    if (existing) {
      return res.status(400).json({ message: "Email already exists" });
    }

    // 3Ô∏è‚É£ M√£ h√≥a password
    const hashed = await bcrypt.hash(password, 10);

    // 4Ô∏è‚É£ G√°n role m·∫∑c ƒë·ªãnh Customer
    const customerRoleId = "44444444-4444-4444-4444-444444444444";

    // 5Ô∏è‚É£ T·∫°o user m·ªõi
    const user = await User.create({
      id: uuidv4(),
      name,
      email,
      phone,
      password: hashed,
      role_id: customerRoleId, // ‚úÖ g√°n role Customer m·∫∑c ƒë·ªãnh
    });

    // 6Ô∏è‚É£ T·∫°o JWT token
    const token = generateToken({
      id: user.id,
      email: user.email,
      role: user.role_id, // ‚úÖ ƒë·ªÉ middleware guard() ƒë·ªçc ƒë∆∞·ª£c
    });

    const refreshToken = jwt.sign(
      { id: user.id },
      process.env.JWT_REFRESH_SECRET,
      { expiresIn: "7d" } // 7 ng√†y
    );

    // 7Ô∏è‚É£ Tr·∫£ v·ªÅ response
    return res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role_id: user.role_id,
      },
      token,
    });
  } catch (err) {
    console.error("‚ùå Register error:", err);
    return res
      .status(500)
      .json({ message: "Server error", error: err.message });
  }
};

// LOGIN
exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ message: "Email v√† password l√† b·∫Øt bu·ªôc" });
    }

    const user = await User.findOne({
      where: { email },
      include: { model: Role, as: "role" },
    });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });

    const token = generateToken({
      id: user.id,
      email: user.email,
      role_name: user.role.name, // üëà d√πng role name
    });

    res.json({ user, token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// GOOGLE LOGIN
exports.googleLogin = async (req, res) => {
  try {
    const { email, name, googleId } = req.body;
    if (!email || !googleId) {
      return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c googleId" });
    }

    let user = await User.findOne({ where: { email } });
    if (!user) {
      // n·∫øu ch∆∞a c√≥ user ‚Üí t·∫°o m·ªõi
      user = await User.create({
        name: name || email.split("@")[0],
        email,
        googleId,
        password: null,
      });
    } else if (!user.googleId) {
      // n·∫øu ƒë√£ c√≥ user nh∆∞ng ch∆∞a g·∫Øn googleId
      user.googleId = googleId;
      await user.save();
    }

    const token = generateToken(user);
    res.json({ user, token });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
